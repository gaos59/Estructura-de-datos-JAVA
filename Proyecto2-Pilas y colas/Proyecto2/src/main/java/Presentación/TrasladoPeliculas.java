/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Presentación;

import Entidades.Productora;
import Negocio.Trasladar;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.JOptionPane;

/**
 *
 * @author Gorte
 */
public final class TrasladoPeliculas extends javax.swing.JFrame {
    
    ProductoraTableModel tableModelOrigen;
    ProductoraTableModel tableModelDestino;
    Productora[] productoras;
    /**
     * Creates new form TrasladoPeliculas
     * @param menuPrincipal
     * @param productoras
     * @throws Negocio.ExcepcionPersonalizada
     */
    public TrasladoPeliculas(MenuPrincipal menuPrincipal, Productora[] productoras) throws Negocio.ExcepcionPersonalizada {        
        try {                       
            if (productoras == null){
               throw new Negocio.ExcepcionPersonalizada ("No hay productoras registradas"); 
            }
            initComponents(); 
            this.productoras = productoras;
            addWindowListener(new WindowAdapter() {
                @Override
                public void windowClosed(WindowEvent e) {
                    menuPrincipal.setTrasladarPeliculasBtnEnabled(true);

                }
            });
            if (productoras[0] != null){
                RefrescarProductorasOrigen(productoras);
                RefrescarProductorasDestino(productoras);
            }
            
        }
        catch (Negocio.ExcepcionPersonalizada e) {
            throw new Negocio.ExcepcionPersonalizada (e.getMessage());            
        }
    }
    
    public void RefrescarProductorasOrigen (Productora[] productoras) throws Negocio.ExcepcionPersonalizada{
        if (productoras.length < 2){
            throw new Negocio.ExcepcionPersonalizada ("No hay suficientes productoras");
        }
        Productora[] productorasOrigen;
        int ProductorasNoVacias = 0;
        for (Productora productora : productoras) {
            if (productora.getPeliculas() != null) {
                ProductorasNoVacias++;
            }
        }
        if (ProductorasNoVacias > 0){
            productorasOrigen = new Productora[ProductorasNoVacias];
            int contador = 0;
            for (Productora productora : productoras) {
                if (productora.getPeliculas() != null) {
                    productorasOrigen[contador] = productora;
                    contador++;
                }
            }
         
            try{
                tableModelOrigen = new ProductoraTableModel(productorasOrigen);
                TblOrigen.setModel(tableModelOrigen);
            }
            catch (Negocio.ExcepcionPersonalizada e) {
                JOptionPane.showMessageDialog(this, "No se puede actualizar la tabla de productoras: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
            catch (Exception e){
                JOptionPane.showMessageDialog(this, "No se puede actualizar la tabla de productoras", "Error", JOptionPane.ERROR_MESSAGE);
            } 
        }
        else {
            throw new Negocio.ExcepcionPersonalizada ("No hay productoras con películas registradas");
        }
    }
    
    public void RefrescarProductorasDestino (Productora[] productoras) throws Negocio.ExcepcionPersonalizada{
        if (productoras.length < 2){
            throw new Negocio.ExcepcionPersonalizada ("No hay suficientes productoras");
        }
        try{
            tableModelDestino = new ProductoraTableModel(productoras);
            TblDestino.setModel(tableModelDestino);
        }
        catch (Exception e){
            JOptionPane.showMessageDialog(this, "No se puede actualizar la tabla de productoras: " + e, "Error", JOptionPane.ERROR_MESSAGE);
        } 
    }
    
    private Productora obtenerValorSeleccionadoProductora(Productora[] productorasSelect, javax.swing.JTable tabla) throws java.lang.Exception {
        int selectedRow = tabla.getSelectedRow();

        try {
            int selectedValue = Integer.parseInt(String.valueOf(tabla.getValueAt(selectedRow, 0)));
            return productorasSelect[selectedValue-1];            
        }
        catch (NumberFormatException e) {
            throw Exception (e.getMessage());
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PnlOrigen = new javax.swing.JPanel();
        LblOrigen = new javax.swing.JLabel();
        ScrOrigen = new javax.swing.JScrollPane();
        TblOrigen = new javax.swing.JTable();
        PnlDestino = new javax.swing.JPanel();
        LblDestino = new javax.swing.JLabel();
        ScrlDestino = new javax.swing.JScrollPane();
        TblDestino = new javax.swing.JTable();
        BtnRegresar = new javax.swing.JButton();
        BtnTransferir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Transferir peliculas");
        setResizable(false);

        LblOrigen.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        LblOrigen.setText("Origen:");

        TblOrigen.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "ID", "Destino"
            }
        ));
        TblOrigen.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                SeleccionOrigen(evt);
            }
        });
        ScrOrigen.setViewportView(TblOrigen);

        javax.swing.GroupLayout PnlOrigenLayout = new javax.swing.GroupLayout(PnlOrigen);
        PnlOrigen.setLayout(PnlOrigenLayout);
        PnlOrigenLayout.setHorizontalGroup(
            PnlOrigenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PnlOrigenLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ScrOrigen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(12, Short.MAX_VALUE))
            .addGroup(PnlOrigenLayout.createSequentialGroup()
                .addComponent(LblOrigen)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        PnlOrigenLayout.setVerticalGroup(
            PnlOrigenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PnlOrigenLayout.createSequentialGroup()
                .addComponent(LblOrigen)
                .addGap(12, 12, 12)
                .addComponent(ScrOrigen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(31, Short.MAX_VALUE))
        );

        LblDestino.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        LblDestino.setText("Destino:");

        TblDestino.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "ID", "Destino"
            }
        ));
        TblDestino.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                SeleccionDestino(evt);
            }
        });
        ScrlDestino.setViewportView(TblDestino);

        javax.swing.GroupLayout PnlDestinoLayout = new javax.swing.GroupLayout(PnlDestino);
        PnlDestino.setLayout(PnlDestinoLayout);
        PnlDestinoLayout.setHorizontalGroup(
            PnlDestinoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PnlDestinoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LblDestino)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(PnlDestinoLayout.createSequentialGroup()
                .addComponent(ScrlDestino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 18, Short.MAX_VALUE))
        );
        PnlDestinoLayout.setVerticalGroup(
            PnlDestinoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PnlDestinoLayout.createSequentialGroup()
                .addComponent(LblDestino)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ScrlDestino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        BtnRegresar.setBackground(new java.awt.Color(255, 204, 204));
        BtnRegresar.setText("Regresar");
        BtnRegresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnRegresarActionPerformed(evt);
            }
        });

        BtnTransferir.setBackground(new java.awt.Color(204, 255, 204));
        BtnTransferir.setText("Transferir");
        BtnTransferir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnTransferirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(PnlOrigen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BtnTransferir, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PnlDestino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(BtnRegresar)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(PnlOrigen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(PnlDestino, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(169, 169, 169)
                        .addComponent(BtnTransferir)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(BtnRegresar)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BtnRegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnRegresarActionPerformed
        this.dispose();
    }//GEN-LAST:event_BtnRegresarActionPerformed

    private void SeleccionDestino(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SeleccionDestino
        int selectedRowOrigen = TblOrigen.getSelectedRow();
        int selectedRowDestino = TblDestino.getSelectedRow();
        
        int selectedValueOrigen = Integer.parseInt(String.valueOf(TblOrigen.getValueAt(selectedRowOrigen, 0)));
        int selectedValueDestino = Integer.parseInt(String.valueOf(TblDestino.getValueAt(selectedRowDestino, 0)));
        
        if (selectedValueOrigen == selectedValueDestino){
            TblDestino.clearSelection();
        }
    }//GEN-LAST:event_SeleccionDestino

    private void BtnTransferirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnTransferirActionPerformed
        try {
            Productora productoraOrigenSelec = obtenerValorSeleccionadoProductora(productoras, TblOrigen);
            Productora productoraDestinoSelec = obtenerValorSeleccionadoProductora(productoras, TblDestino);
            productoraDestinoSelec.setPeliculas(Trasladar.Trasladar(productoraOrigenSelec.getPeliculas(), productoraDestinoSelec.getPeliculas()));
            productoraOrigenSelec.setPeliculas(null);
            this.dispose();
        }
        catch (Exception e){
            JOptionPane.showMessageDialog(this, "No se traslado películas por un error ", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_BtnTransferirActionPerformed

    private void SeleccionOrigen(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SeleccionOrigen
        int selectedRowOrigen = TblOrigen.getSelectedRow();
        int selectedRowDestino = TblDestino.getSelectedRow();
        
        if (TblDestino.getSelectedRow() > 0 ){
            int selectedValueOrigen = Integer.parseInt(String.valueOf(TblOrigen.getValueAt(selectedRowOrigen, 0)));
            int selectedValueDestino = Integer.parseInt(String.valueOf(TblDestino.getValueAt(selectedRowDestino, 0)));
        
            if (selectedValueOrigen == selectedValueDestino){
                TblDestino.clearSelection();
            }
        }
        
        
    }//GEN-LAST:event_SeleccionOrigen


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnRegresar;
    private javax.swing.JButton BtnTransferir;
    private javax.swing.JLabel LblDestino;
    private javax.swing.JLabel LblOrigen;
    private javax.swing.JPanel PnlDestino;
    private javax.swing.JPanel PnlOrigen;
    private javax.swing.JScrollPane ScrOrigen;
    private javax.swing.JScrollPane ScrlDestino;
    private javax.swing.JTable TblDestino;
    private javax.swing.JTable TblOrigen;
    // End of variables declaration//GEN-END:variables

    private Exception Exception(String message) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
